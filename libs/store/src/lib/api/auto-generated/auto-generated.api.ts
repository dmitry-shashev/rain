import { autoGeneratedBaseApi as api } from './auto-generated-base.api'
export const addTagTypes = ['users', 'auth'] as const
const injectedRtkApi = api
  .enhanceEndpoints({
    addTagTypes,
  })
  .injectEndpoints({
    endpoints: (build) => ({
      usersControllerFindAll: build.query<
        UsersControllerFindAllResponseDto,
        UsersControllerFindAllRequestDto
      >({
        query: () => ({ url: `/api/users` }),
        providesTags: ['users'],
      }),
      usersControllerCreate: build.mutation<
        UsersControllerCreateResponseDto,
        UsersControllerCreateRequestDto
      >({
        query: (queryArg) => ({
          url: `/api/users`,
          method: 'POST',
          body: queryArg.createUserDto,
        }),
        invalidatesTags: ['users'],
      }),
      usersControllerFindOne: build.query<
        UsersControllerFindOneResponseDto,
        UsersControllerFindOneRequestDto
      >({
        query: (queryArg) => ({ url: `/api/users/${queryArg.id}` }),
        providesTags: ['users'],
      }),
      usersControllerUpdate: build.mutation<
        UsersControllerUpdateResponseDto,
        UsersControllerUpdateRequestDto
      >({
        query: (queryArg) => ({
          url: `/api/users/${queryArg.id}`,
          method: 'PATCH',
          body: queryArg.updateUserDto,
        }),
        invalidatesTags: ['users'],
      }),
      authControllerLogin: build.mutation<
        AuthControllerLoginResponseDto,
        AuthControllerLoginRequestDto
      >({
        query: (queryArg) => ({
          url: `/api/auth/login`,
          method: 'POST',
          body: queryArg.loginDto,
        }),
        invalidatesTags: ['auth'],
      }),
      authControllerLogout: build.mutation<
        AuthControllerLogoutResponseDto,
        AuthControllerLogoutRequestDto
      >({
        query: () => ({
          url: `/api/auth/logout`,
          method: 'POST',
        }),
        invalidatesTags: ['auth'],
      }),
      authControllerGetCurrentUser: build.query<
        AuthControllerGetCurrentUserResponseDto,
        AuthControllerGetCurrentUserRequestDto
      >({
        query: () => ({ url: `/api/auth/current-user` }),
        providesTags: ['auth'],
      }),
      authControllerSomeProtected: build.query<
        AuthControllerSomeProtectedResponseDto,
        AuthControllerSomeProtectedRequestDto
      >({
        query: () => ({ url: `/api/auth/some-protected` }),
        providesTags: ['auth'],
      }),
    }),
    overrideExisting: false,
  })
export { injectedRtkApi as autoGenerated }
export type UsersControllerFindAllResponseDto =
  /** status 200 Find all users */ UsersListDto
export type UsersControllerFindAllRequestDto = void
export type UsersControllerCreateResponseDto =
  /** status 201 Create user */ UserDto
export type UsersControllerCreateRequestDto = {
  createUserDto: CreateUserDto
}
export type UsersControllerFindOneResponseDto =
  /** status 200 Find a specific user */ UserDto
export type UsersControllerFindOneRequestDto = {
  id: number
}
export type UsersControllerUpdateResponseDto =
  /** status 200 Update user */ UserDto
export type UsersControllerUpdateRequestDto = {
  id: number
  updateUserDto: UpdateUserDto
}
export type AuthControllerLoginResponseDto = unknown
export type AuthControllerLoginRequestDto = {
  loginDto: LoginDto
}
export type AuthControllerLogoutResponseDto = unknown
export type AuthControllerLogoutRequestDto = void
export type AuthControllerGetCurrentUserResponseDto =
  /** status 200 Get current user data */ UserDto
export type AuthControllerGetCurrentUserRequestDto = void
export type AuthControllerSomeProtectedResponseDto = unknown
export type AuthControllerSomeProtectedRequestDto = void
export type UserDto = {
  id: number
  name: string
  email: string
}
export type UsersListDto = {
  users: Array<UserDto>
}
export type CreateUserDto = {
  name: string
  email: string
  password: string
}
export type UpdateUserDto = {
  name: string
}
export type LoginDto = {
  email: string
  password: string
}
export const {
  useUsersControllerFindAllQuery,
  useLazyUsersControllerFindAllQuery,
  useUsersControllerCreateMutation,
  useUsersControllerFindOneQuery,
  useLazyUsersControllerFindOneQuery,
  useUsersControllerUpdateMutation,
  useAuthControllerLoginMutation,
  useAuthControllerLogoutMutation,
  useAuthControllerGetCurrentUserQuery,
  useLazyAuthControllerGetCurrentUserQuery,
  useAuthControllerSomeProtectedQuery,
  useLazyAuthControllerSomeProtectedQuery,
} = injectedRtkApi
